{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kitsune\\\\dev\\\\projekt-frontend\\\\src\\\\pages\\\\Forecast.js\",\n  _s = $RefreshSig$();\nimport CityDetails from \"../components/CityDetails\";\nimport Header from \"../components/Header\";\nimport { useState, useEffect } from \"react\";\nimport API_KEY from \"../API_KEY\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Forecast({\n  children,\n  cities,\n  onClick,\n  imperial,\n  onCityLookup\n}) {\n  _s();\n  document.title = \"Prognoza\";\n  const [suggestions, setSuggestions] = useState([]);\n  const [load, setLoad] = useState(false);\n  useEffect(function () {\n    async function nazwa(params = \"lub\") {\n      try {\n        const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${params}&limit=5&appid=${API_KEY()}`);\n        setLoad(true);\n        if (!response.ok) {\n          throw new Error(\"Błąd pobierania sugestii\");\n        }\n        const data = await response.json();\n        const formattedSuggestions = data.map(city => ({\n          name: city.name,\n          country: city.country,\n          state: city.state,\n          lat: city.lat,\n          lon: city.lon\n        }));\n        setSuggestions(formattedSuggestions);\n      } catch (err) {\n        console.error(\"Błąd:\", err);\n        setSuggestions([]);\n        setLoad(false);\n      }\n    }\n    nazwa();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"city-lookup\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onCityLookup,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Wpisz miasto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-container\",\n      children: !load && suggestions.map(suggestion => {\n        return /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: suggestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 32\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n_s(Forecast, \"91dMk3ftuqdNetmMxR8QXv3W7fg=\");\n_c = Forecast;\nexport default Forecast;\nvar _c;\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"names":["CityDetails","Header","useState","useEffect","API_KEY","jsxDEV","_jsxDEV","Forecast","children","cities","onClick","imperial","onCityLookup","_s","document","title","suggestions","setSuggestions","load","setLoad","nazwa","params","response","fetch","ok","Error","data","json","formattedSuggestions","map","city","name","country","state","lat","lon","err","console","error","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","type","placeholder","suggestion","_c","$RefreshReg$"],"sources":["C:/Users/Kitsune/dev/projekt-frontend/src/pages/Forecast.js"],"sourcesContent":["import CityDetails from \"../components/CityDetails\";\r\nimport Header from \"../components/Header\";\r\nimport { useState, useEffect } from \"react\";\r\nimport API_KEY from \"../API_KEY\";\r\n\r\nfunction Forecast({ children, cities, onClick, imperial, onCityLookup }) {\r\n    document.title = \"Prognoza\";\r\n\r\n    const [suggestions, setSuggestions] = useState([]);\r\n    const [load, setLoad] = useState(false);\r\n    useEffect(function () {\r\n        async function nazwa(params = \"lub\") {\r\n            try {\r\n                const response = await fetch(\r\n                    `https://api.openweathermap.org/geo/1.0/direct?q=${params}&limit=5&appid=${API_KEY()}`\r\n                );\r\n                setLoad(true);\r\n                if (!response.ok) {\r\n                    throw new Error(\"Błąd pobierania sugestii\");\r\n                }\r\n\r\n                const data = await response.json();\r\n                const formattedSuggestions = data.map((city) => ({\r\n                    name: city.name,\r\n                    country: city.country,\r\n                    state: city.state,\r\n                    lat: city.lat,\r\n                    lon: city.lon,\r\n                }));\r\n\r\n                setSuggestions(formattedSuggestions);\r\n            } catch (err) {\r\n                console.error(\"Błąd:\", err);\r\n                setSuggestions([]);\r\n                setLoad(false);\r\n            }\r\n        }\r\n\r\n        nazwa();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"city-lookup\">\r\n                <form onSubmit={onCityLookup}>\r\n                    <input type=\"text\" placeholder=\"Wpisz miasto\" />\r\n                </form>\r\n            </div>\r\n            <div className=\"forecast-container\">\r\n                {!load &&\r\n                    suggestions.map((suggestion) => {\r\n                        return <h1>{suggestion}</h1>;\r\n                    })}\r\n                {/* {cities.map((city) => {\r\n                    return (\r\n                        <CityDetails\r\n                            city={city}\r\n                            key={city}\r\n                            onClick={onClick}\r\n                            imperial={imperial}\r\n                        />\r\n                    );\r\n                })} */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Forecast;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}