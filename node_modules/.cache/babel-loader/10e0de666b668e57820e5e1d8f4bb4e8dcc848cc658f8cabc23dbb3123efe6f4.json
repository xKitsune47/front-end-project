{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kitsune\\\\dev\\\\projekt-frontend\\\\src\\\\contexts\\\\ForecastContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useReducer, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForecastContext = /*#__PURE__*/createContext();\n\n// constant initial/placeholder values\nconst initialCities = [\"Legnica\", \"Wrocław\", \"Opole\", \"Tokyo\", \"Berlin\"];\n\n// constant functions\nconst getLocalStorageItem = (key, defaultValue) => {\n  const item = localStorage.getItem(key);\n  if (item === null) {\n    localStorage.setItem(key, JSON.stringify(defaultValue));\n    return defaultValue;\n  }\n  return JSON.parse(item);\n};\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"imperial/changed\":\n      return {\n        ...state,\n        imperial: !state.imperial\n      };\n    default:\n      break;\n  }\n}\nfunction ForecastProvider({\n  children\n}) {\n  _s();\n  const initialState = {\n    imperial: getLocalStorageItem(\"imperial\", false),\n    saved: getLocalStorageItem(\"fav_cities\", initialCities)\n  };\n  const [{\n    imperial,\n    saved\n  }, dispatch] = useReducer(reducer, initialState);\n  function handleImperialChange() {\n    dispatch({\n      type: \"imperial/changed\"\n    });\n    localStorage.setItem(\"imperial\", JSON.stringify(imperial));\n  }\n\n  // fetching data from localStorage\n\n  const [citiesState, setCitiesState] = useState([...saved]);\n\n  // removing city form cities state\n  function removeCity(elem) {\n    return citiesState.filter(ct => ct !== elem);\n  }\n\n  // city lookup\n  function handleSearchCity(e) {\n    e.preventDefault();\n    let term = e.target.firstChild.value;\n    term = term[0].toUpperCase() + term.substring(1);\n    setCitiesState([...citiesState, term]);\n    e.target.firstChild.value = \"\";\n  }\n\n  // addition/removal city to/from favourites\n  function handleCity(elem) {\n    if (citiesState.includes(elem) && saved.includes(elem)) {\n      // removing city from localStorage\n      const removedCities = removeCity(elem);\n      localStorage.setItem(\"fav_cities\", JSON.stringify(removedCities));\n      setSaved(removedCities);\n    }\n    if (!saved.includes(elem)) {\n      // adding city to localStorage\n      const addCity = [...saved, elem];\n      localStorage.setItem(\"fav_cities\", JSON.stringify(addCity));\n      setSaved(addCity);\n    }\n  }\n\n  // removing city from favs\n  function handleDelete(elem) {\n    if (saved.includes(elem)) {\n      const removeFav = saved.filter(ct => ct !== elem);\n      localStorage.setItem(\"fav_cities\", JSON.stringify(removeFav));\n      setSaved(removeFav);\n    }\n  }\n\n  // clearing the list from empty list elements\n  useEffect(() => {\n    setCitiesState(removeCity(\"\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ForecastContext.Provider, {\n    value: {\n      imperial,\n      handleImperialChange,\n      calcTemp,\n      calcWind,\n      // HANDLE CITIES\n      handleCity,\n      handleDelete,\n      handleSearchCity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n_s(ForecastProvider, \"/AYfzKdKwOjWi6otAbwJU8oa2lM=\");\n_c = ForecastProvider;\nfunction useForecast() {\n  _s2();\n  const context = useContext(ForecastContext);\n  if (context === undefined) {\n    throw new Error(\"ForecastContext użyte poza ForecastProvider\");\n  }\n  return context;\n}\n_s2(useForecast, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { ForecastProvider, useForecast };\nvar _c;\n$RefreshReg$(_c, \"ForecastProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useReducer","useState","jsxDEV","_jsxDEV","ForecastContext","initialCities","getLocalStorageItem","key","defaultValue","item","localStorage","getItem","setItem","JSON","stringify","parse","reducer","state","action","type","imperial","ForecastProvider","children","_s","initialState","saved","dispatch","handleImperialChange","citiesState","setCitiesState","removeCity","elem","filter","ct","handleSearchCity","e","preventDefault","term","target","firstChild","value","toUpperCase","substring","handleCity","includes","removedCities","setSaved","addCity","handleDelete","removeFav","Provider","calcTemp","calcWind","fileName","_jsxFileName","lineNumber","columnNumber","_c","useForecast","_s2","context","undefined","Error","$RefreshReg$"],"sources":["C:/Users/Kitsune/dev/projekt-frontend/src/contexts/ForecastContext.js"],"sourcesContent":["import {\r\n    createContext,\r\n    useContext,\r\n    useEffect,\r\n    useReducer,\r\n    useState,\r\n} from \"react\";\r\n\r\nconst ForecastContext = createContext();\r\n\r\n// constant initial/placeholder values\r\nconst initialCities = [\"Legnica\", \"Wrocław\", \"Opole\", \"Tokyo\", \"Berlin\"];\r\n\r\n// constant functions\r\nconst getLocalStorageItem = (key, defaultValue) => {\r\n    const item = localStorage.getItem(key);\r\n    if (item === null) {\r\n        localStorage.setItem(key, JSON.stringify(defaultValue));\r\n        return defaultValue;\r\n    }\r\n    return JSON.parse(item);\r\n};\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case \"imperial/changed\":\r\n            return { ...state, imperial: !state.imperial };\r\n\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nfunction ForecastProvider({ children }) {\r\n    const initialState = {\r\n        imperial: getLocalStorageItem(\"imperial\", false),\r\n        saved: getLocalStorageItem(\"fav_cities\", initialCities),\r\n    };\r\n\r\n    const [{ imperial, saved }, dispatch] = useReducer(reducer, initialState);\r\n\r\n    function handleImperialChange() {\r\n        dispatch({ type: \"imperial/changed\" });\r\n        localStorage.setItem(\"imperial\", JSON.stringify(imperial));\r\n    }\r\n\r\n    // fetching data from localStorage\r\n\r\n    const [citiesState, setCitiesState] = useState([...saved]);\r\n\r\n    // removing city form cities state\r\n    function removeCity(elem) {\r\n        return citiesState.filter((ct) => ct !== elem);\r\n    }\r\n\r\n    // city lookup\r\n    function handleSearchCity(e) {\r\n        e.preventDefault();\r\n        let term = e.target.firstChild.value;\r\n        term = term[0].toUpperCase() + term.substring(1);\r\n        setCitiesState([...citiesState, term]);\r\n        e.target.firstChild.value = \"\";\r\n    }\r\n\r\n    // addition/removal city to/from favourites\r\n    function handleCity(elem) {\r\n        if (citiesState.includes(elem) && saved.includes(elem)) {\r\n            // removing city from localStorage\r\n            const removedCities = removeCity(elem);\r\n            localStorage.setItem(\"fav_cities\", JSON.stringify(removedCities));\r\n            setSaved(removedCities);\r\n        }\r\n        if (!saved.includes(elem)) {\r\n            // adding city to localStorage\r\n            const addCity = [...saved, elem];\r\n            localStorage.setItem(\"fav_cities\", JSON.stringify(addCity));\r\n            setSaved(addCity);\r\n        }\r\n    }\r\n\r\n    // removing city from favs\r\n    function handleDelete(elem) {\r\n        if (saved.includes(elem)) {\r\n            const removeFav = saved.filter((ct) => ct !== elem);\r\n            localStorage.setItem(\"fav_cities\", JSON.stringify(removeFav));\r\n            setSaved(removeFav);\r\n        }\r\n    }\r\n\r\n    // clearing the list from empty list elements\r\n    useEffect(() => {\r\n        setCitiesState(removeCity(\"\"));\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <ForecastContext.Provider\r\n            value={{\r\n                imperial,\r\n                handleImperialChange,\r\n                calcTemp,\r\n                calcWind,\r\n                // HANDLE CITIES\r\n                handleCity,\r\n                handleDelete,\r\n                handleSearchCity,\r\n            }}>\r\n            {children}\r\n        </ForecastContext.Provider>\r\n    );\r\n}\r\n\r\nfunction useForecast() {\r\n    const context = useContext(ForecastContext);\r\n    if (context === undefined) {\r\n        throw new Error(\"ForecastContext użyte poza ForecastProvider\");\r\n    }\r\n\r\n    return context;\r\n}\r\n\r\nexport { ForecastProvider, useForecast };\r\n"],"mappings":";;;AAAA,SACIA,aAAa,EACbC,UAAU,EACVC,SAAS,EACTC,UAAU,EACVC,QAAQ,QACL,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEf,MAAMC,eAAe,gBAAGP,aAAa,CAAC,CAAC;;AAEvC;AACA,MAAMQ,aAAa,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC;;AAExE;AACA,MAAMC,mBAAmB,GAAGA,CAACC,GAAG,EAAEC,YAAY,KAAK;EAC/C,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAACJ,GAAG,CAAC;EACtC,IAAIE,IAAI,KAAK,IAAI,EAAE;IACfC,YAAY,CAACE,OAAO,CAACL,GAAG,EAAEM,IAAI,CAACC,SAAS,CAACN,YAAY,CAAC,CAAC;IACvD,OAAOA,YAAY;EACvB;EACA,OAAOK,IAAI,CAACE,KAAK,CAACN,IAAI,CAAC;AAC3B,CAAC;AAED,SAASO,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC5B,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,kBAAkB;MACnB,OAAO;QAAE,GAAGF,KAAK;QAAEG,QAAQ,EAAE,CAACH,KAAK,CAACG;MAAS,CAAC;IAElD;MACI;EACR;AACJ;AAEA,SAASC,gBAAgBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACpC,MAAMC,YAAY,GAAG;IACjBJ,QAAQ,EAAEd,mBAAmB,CAAC,UAAU,EAAE,KAAK,CAAC;IAChDmB,KAAK,EAAEnB,mBAAmB,CAAC,YAAY,EAAED,aAAa;EAC1D,CAAC;EAED,MAAM,CAAC;IAAEe,QAAQ;IAAEK;EAAM,CAAC,EAAEC,QAAQ,CAAC,GAAG1B,UAAU,CAACgB,OAAO,EAAEQ,YAAY,CAAC;EAEzE,SAASG,oBAAoBA,CAAA,EAAG;IAC5BD,QAAQ,CAAC;MAAEP,IAAI,EAAE;IAAmB,CAAC,CAAC;IACtCT,YAAY,CAACE,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACM,QAAQ,CAAC,CAAC;EAC9D;;EAEA;;EAEA,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAAC,CAAC,GAAGwB,KAAK,CAAC,CAAC;;EAE1D;EACA,SAASK,UAAUA,CAACC,IAAI,EAAE;IACtB,OAAOH,WAAW,CAACI,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKF,IAAI,CAAC;EAClD;;EAEA;EACA,SAASG,gBAAgBA,CAACC,CAAC,EAAE;IACzBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAIC,IAAI,GAAGF,CAAC,CAACG,MAAM,CAACC,UAAU,CAACC,KAAK;IACpCH,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC,GAAGJ,IAAI,CAACK,SAAS,CAAC,CAAC,CAAC;IAChDb,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAES,IAAI,CAAC,CAAC;IACtCF,CAAC,CAACG,MAAM,CAACC,UAAU,CAACC,KAAK,GAAG,EAAE;EAClC;;EAEA;EACA,SAASG,UAAUA,CAACZ,IAAI,EAAE;IACtB,IAAIH,WAAW,CAACgB,QAAQ,CAACb,IAAI,CAAC,IAAIN,KAAK,CAACmB,QAAQ,CAACb,IAAI,CAAC,EAAE;MACpD;MACA,MAAMc,aAAa,GAAGf,UAAU,CAACC,IAAI,CAAC;MACtCrB,YAAY,CAACE,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAAC+B,aAAa,CAAC,CAAC;MACjEC,QAAQ,CAACD,aAAa,CAAC;IAC3B;IACA,IAAI,CAACpB,KAAK,CAACmB,QAAQ,CAACb,IAAI,CAAC,EAAE;MACvB;MACA,MAAMgB,OAAO,GAAG,CAAC,GAAGtB,KAAK,EAAEM,IAAI,CAAC;MAChCrB,YAAY,CAACE,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAACiC,OAAO,CAAC,CAAC;MAC3DD,QAAQ,CAACC,OAAO,CAAC;IACrB;EACJ;;EAEA;EACA,SAASC,YAAYA,CAACjB,IAAI,EAAE;IACxB,IAAIN,KAAK,CAACmB,QAAQ,CAACb,IAAI,CAAC,EAAE;MACtB,MAAMkB,SAAS,GAAGxB,KAAK,CAACO,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKF,IAAI,CAAC;MACnDrB,YAAY,CAACE,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAACmC,SAAS,CAAC,CAAC;MAC7DH,QAAQ,CAACG,SAAS,CAAC;IACvB;EACJ;;EAEA;EACAlD,SAAS,CAAC,MAAM;IACZ8B,cAAc,CAACC,UAAU,CAAC,EAAE,CAAC,CAAC;IAC9B;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI3B,OAAA,CAACC,eAAe,CAAC8C,QAAQ;IACrBV,KAAK,EAAE;MACHpB,QAAQ;MACRO,oBAAoB;MACpBwB,QAAQ;MACRC,QAAQ;MACR;MACAT,UAAU;MACVK,YAAY;MACZd;IACJ,CAAE;IAAAZ,QAAA,EACDA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAEnC;AAACjC,EAAA,CA7EQF,gBAAgB;AAAAoC,EAAA,GAAhBpC,gBAAgB;AA+EzB,SAASqC,WAAWA,CAAA,EAAG;EAAAC,GAAA;EACnB,MAAMC,OAAO,GAAG9D,UAAU,CAACM,eAAe,CAAC;EAC3C,IAAIwD,OAAO,KAAKC,SAAS,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAClE;EAEA,OAAOF,OAAO;AAClB;AAACD,GAAA,CAPQD,WAAW;AASpB,SAASrC,gBAAgB,EAAEqC,WAAW;AAAG,IAAAD,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}